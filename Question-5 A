package threadSynchronizationDemo;

public class ThreadSynchronizationDemo {
	 // Shared sum variable
    private static Integer sum = 0;

    public static void main(String[] args) throws InterruptedException {
        System.out.println("Without Synchronization:");
        runThreads(false);

        System.out.println("\nWith Synchronization:");
        runThreads(true);

}
    private static void runThreads(boolean synchronizedBlock) throws InterruptedException {
        // Reset sum for each test
        sum = 0;

        // Array to hold thread objects
        Thread[] threads = new Thread[1000];

        for (int i = 0; i < 1000; i++) {
            threads[i] = new Thread(() -> {
                if (synchronizedBlock) {
                    // Synchronized block to ensure thread safety
                    synchronized (ThreadSynchronizationDemo.class) {
                        sum++;
                    }
                } else {
                    // Increment without synchronization
                    sum++;
                }
            });
        }

        // Start all threads
        for (Thread thread : threads) {
            thread.start();
        }

        // Wait for all threads to complete
        for (Thread thread : threads) {
            thread.join();
        }

        // Print the final value of sum
        System.out.println("Final value of sum: " + sum);
    }
}

